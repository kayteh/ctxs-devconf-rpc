// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: discord.proto

package discord

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Discord service

type DiscordService interface {
	RootGetAllServers(ctx context.Context, in *Empty, opts ...client.CallOption) (*ServerSlugPayload, error)
}

type discordService struct {
	c    client.Client
	name string
}

func NewDiscordService(name string, c client.Client) DiscordService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "discord"
	}
	return &discordService{
		c:    c,
		name: name,
	}
}

func (c *discordService) RootGetAllServers(ctx context.Context, in *Empty, opts ...client.CallOption) (*ServerSlugPayload, error) {
	req := c.c.NewRequest(c.name, "Discord.RootGetAllServers", in)
	out := new(ServerSlugPayload)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Discord service

type DiscordHandler interface {
	RootGetAllServers(context.Context, *Empty, *ServerSlugPayload) error
}

func RegisterDiscordHandler(s server.Server, hdlr DiscordHandler, opts ...server.HandlerOption) error {
	type discord interface {
		RootGetAllServers(ctx context.Context, in *Empty, out *ServerSlugPayload) error
	}
	type Discord struct {
		discord
	}
	h := &discordHandler{hdlr}
	return s.Handle(s.NewHandler(&Discord{h}, opts...))
}

type discordHandler struct {
	DiscordHandler
}

func (h *discordHandler) RootGetAllServers(ctx context.Context, in *Empty, out *ServerSlugPayload) error {
	return h.DiscordHandler.RootGetAllServers(ctx, in, out)
}
